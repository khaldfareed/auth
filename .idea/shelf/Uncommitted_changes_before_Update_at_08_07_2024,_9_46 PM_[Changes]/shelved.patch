Index: auth/users/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\nfrom .models import User, Reservation\nfrom .serializers import UserSerializer, ReservationSerializer, PasswordResetRequestSerializer, PasswordResetSerializer\nfrom rest_framework.exceptions import AuthenticationFailed\nimport jwt\nimport datetime\nfrom django.utils import timezone\nimport random\nimport logging\nfrom django.core.mail import send_mail\nimport pytz\n\nlogger = logging.getLogger(__name__)\n\nclass RegisterAPIView(APIView):\n    def post(self, request):\n        serializer = UserSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            logger.info(f'User registered with email: {serializer.data[\"email\"]}')\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        logger.error('User registration failed')\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\nclass LoginAPIView(APIView):\n    def post(self, request):\n        email = request.data.get('email')\n        password = request.data.get('password')\n        user = User.objects.filter(email=email).first()\n        if user is None or not user.check_password(password):\n            logger.warning(f'Invalid login attempt for email: {email}')\n            raise AuthenticationFailed('Invalid credentials')\n        payload = {\n            'id': user.id,\n            'exp': timezone.now() + datetime.timedelta(minutes=60),\n            'iat': timezone.now()\n        }\n        token = jwt.encode(payload, 'secret', algorithm='HS256')\n        response = Response()\n        response.set_cookie(key='jwt', value=token, httponly=True)\n        response.data = {'jwt': token}\n        logger.info(f'User logged in: {email}')\n        return response\n\nclass UserView(APIView):\n    def get(self, request):\n        token = request.COOKIES.get('jwt')\n        if not token:\n            logger.warning('Unauthenticated access attempt')\n            raise AuthenticationFailed(\"Unauthenticated\")\n        try:\n            payload = jwt.decode(token, 'secret', algorithms=['HS256'])\n        except jwt.ExpiredSignatureError:\n            logger.warning('Expired JWT token')\n            raise AuthenticationFailed(\"Unauthenticated\")\n        user = User.objects.filter(id=payload['id']).first()\n        if user:\n            serializer = UserSerializer(user)\n            logger.info(f'User data retrieved: {user.email}')\n            return Response(serializer.data)\n        logger.error('User not found')\n        raise AuthenticationFailed(\"Unauthenticated\")\n\nclass LogoutView(APIView):\n    def post(self, request):\n        response = Response()\n        response.delete_cookie('jwt')\n        response.data = {'message': 'success'}\n        logger.info('User logged out')\n        return response\n\n#\nclass ReserveSlotAPIView(APIView):\n    def post(self, request):\n        token = request.COOKIES.get('jwt')\n        if not token:\n            logger.warning('Unauthenticated access attempt')\n            raise AuthenticationFailed(\"Unauthenticated\")\n        try:\n            payload = jwt.decode(token, 'secret', algorithms=['HS256'])\n        except jwt.ExpiredSignatureError:\n            logger.warning('Expired JWT token')\n            raise AuthenticationFailed(\"Unauthenticated\")\n\n        user = User.objects.get(id=payload['id'])\n\n        # Check if there is an active reservation code that has not been exited\n        active_reservation = Reservation.objects.filter(\n            user=user,\n            exited_at__isnull=True\n        ).order_by('-reserved_at').first()\n\n        if active_reservation:\n            if active_reservation.activated_at:\n                logger.info(f'User {user.email} tried to generate another reservation code without exiting the last one')\n                return Response({\n                    'message': 'You cannot get another reservation code until you exit.'\n                }, status=status.HTTP_400_BAD_REQUEST)\n\n            if active_reservation.expires_at and active_reservation.expires_at > timezone.now():\n\n                reservation_code = active_reservation.reservation_code\n\n                # Convert the expiration time to Egypt Standard Time (UTC+2)\n                egypt_timezone = pytz.timezone('Africa/Cairo')\n                expires_at_utc = active_reservation.expires_at\n                expires_at_egypt = expires_at_utc.astimezone(egypt_timezone)\n                expires_at = expires_at_egypt.strftime('%H:%M at %d-%b-%Y')  # Format datetime with month abbreviation\n\n                logger.info(f'User {user.email} tried to generate another reservation code without activating the last one')\n                return Response({\n                    'message': 'You already have a reservation code: {' + f' {reservation_code} ' + '} and it expires at:' + f'{expires_at}'\n                }, status=status.HTTP_400_BAD_REQUEST)\n\n        # Check if there are already 4 active reservations globally\n        active_reservations_count = Reservation.objects.filter(exited_at__isnull=True, activated_at__isnull=False).count()\n        if active_reservations_count >= 4:\n            logger.info('All slots are reserved')\n            return Response({'message': 'All slots are reserved'}, status=status.HTTP_400_BAD_REQUEST)\n\n        # Create new reservation\n        expires_at = timezone.now() + datetime.timedelta(hours=1)\n        reservation_code = '{:04d}'.format(random.randint(0, 9999))\n        reservation = Reservation.objects.create(\n            user=user,\n            reservation_code=reservation_code,\n            expires_at=expires_at,\n            reserved_at=timezone.now()\n        )\n        serializer = ReservationSerializer(reservation)\n        logger.info(f'Reservation created for user {user.email} with code {reservation_code}')\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\n\n\n\nclass ActivateSlotOuterAPIView(APIView):\n    \"\"\"\n    API endpoint to activate a reserved code at the outer screen.\n    \"\"\"\n    def post(self, request, code):\n        logger.debug(\"Received request to activate slot with code: %s at the outer screen\", code)\n\n        try:\n            reservation = Reservation.objects.get(reservation_code=code)\n            logger.debug(\"Reservation found with code: %s\", code)\n\n            if reservation.activated_at:\n                logger.info(\"Reservation already activated: %s\", code)\n                return Response({'message': 'Already activated'}, status=status.HTTP_400_BAD_REQUEST)\n\n            if reservation.expires_at and reservation.expires_at < timezone.now():\n                logger.info(\"Reservation code expired: %s\", code)\n                return Response({'message': 'Reservation code expired'}, status=status.HTTP_400_BAD_REQUEST)\n\n            reservation.activated_at = timezone.now()\n            reservation.expires_at = None  # Clear the expiration time once activated\n            reservation.save()\n            logger.info(\"Reservation activated successfully: %s at the outer screen\", code)\n\n            return Response({'message': 'Welcome to the parking'}, status=status.HTTP_200_OK)\n\n        except Reservation.DoesNotExist:\n            logger.warning(\"Invalid reservation code: %s\", code)\n            return Response({'message': 'Invalid code'}, status=status.HTTP_400_BAD_REQUEST)\n\n\nclass ExitSlotInnerAPIView(APIView):\n    \"\"\"\n    API endpoint to exit a reserved code at the inner screen.\n    \"\"\"\n    def post(self, request, code):\n        logger.debug(\"Received request to exit slot with code: %s at the inner screen\", code)\n\n        try:\n            reservation = Reservation.objects.get(reservation_code=code)\n            logger.debug(\"Reservation found with code: %s\", code)\n\n            if reservation.exited_at:\n                logger.info(\"Reservation already exited: %s\", code)\n                return Response({'message': 'Already exited'}, status=status.HTTP_400_BAD_REQUEST)\n\n            reservation.exited_at = timezone.now()\n            reservation.save()\n            logger.info(\"Reservation exited successfully: %s at the inner screen\", code)\n\n            duration = reservation.calculate_duration()\n            logger.debug(\"Reservation duration calculated: %s\", duration)\n\n            return Response({'message': 'Exited', 'duration': duration}, status=status.HTTP_200_OK)\n\n        except Reservation.DoesNotExist:\n            logger.warning(\"Invalid reservation code: %s\", code)\n            return Response({'message': 'Invalid code'}, status=status.HTTP_400_BAD_REQUEST)\n\nclass ReservationHistoryAPIView(APIView):\n    def get(self, request):\n        token = request.COOKIES.get('jwt')\n        if not token:\n            logger.warning('Unauthenticated access attempt')\n            raise AuthenticationFailed(\"Unauthenticated\")\n        try:\n            payload = jwt.decode(token, 'secret', algorithms=['HS256'])\n        except jwt.ExpiredSignatureError:\n            logger.warning('Expired JWT token')\n            raise AuthenticationFailed(\"Unauthenticated\")\n\n        user = User.objects.get(id=payload['id'])\n        reservations = Reservation.objects.filter(user=user).order_by('-reserved_at')\n        serializer = ReservationSerializer(reservations, many=True)\n        logger.info(f'Reservation history retrieved for user: {user.email}')\n        return Response(serializer.data)\n\nclass FreeSlotsAPIView(APIView):\n    def get(self, request):\n        active_reservations = Reservation.objects.filter(exited_at__isnull=True, activated_at__isnull=False).count()\n        free_slots = 4 - active_reservations\n        logger.info(f'Free slots count: {free_slots}')\n        return Response({'free_slots': free_slots}, status=status.HTTP_200_OK)\n\nclass ActiveSlotsAPIView(APIView):\n    def get(self, request):\n        active_reservations = Reservation.objects.filter(activated_at__isnull=False, exited_at__isnull=True)\n        serializer = ReservationSerializer(active_reservations, many=True)\n        logger.info('Active slots retrieved')\n        return Response(serializer.data, status=status.HTTP_200_OK)\n\nclass PasswordResetRequestAPIView(APIView):\n    def post(self, request):\n        serializer = PasswordResetRequestSerializer(data=request.data)\n        if serializer.is_valid():\n            email = serializer.validated_data['email']\n            user = User.objects.filter(email=email).first()\n            if user:\n                reset_token = '{:04d}'.format(random.randint(0, 9999))  # Generate 4-digit token\n                reset_token_expires_at = timezone.now() + datetime.timedelta(hours=1)\n                user.reset_token = reset_token\n                user.reset_token_expires_at = reset_token_expires_at\n                user.save()\n                send_mail(\n                    'Password Reset Request',\n                    f'Your password reset code is: {reset_token}',\n                    'KhaldCse@outlook.com',\n                    [user.email],\n                    fail_silently=False,\n                )\n                logger.info(f'Password reset email sent to {user.email}')\n            return Response({'message': 'If your email is registered, you will receive a password reset code.'}, status=status.HTTP_200_OK)\n        logger.error('Password reset request validation failed')\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\nclass PasswordResetAPIView(APIView):\n    def post(self, request):\n        serializer = PasswordResetSerializer(data=request.data)\n        if serializer.is_valid():\n            reset_token = serializer.validated_data['reset_token']\n            new_password = serializer.validated_data['new_password']\n            user = User.objects.filter(reset_token=reset_token, reset_token_expires_at__gt=timezone.now()).first()\n            if not user:\n                logger.error('Invalid or expired reset token')\n                return Response({'message': 'Invalid or expired reset token.'}, status=status.HTTP_400_BAD_REQUEST)\n            user.set_password(new_password)\n            user.reset_token = None\n            user.reset_token_expires_at = None\n            user.save()\n            logger.info(f'Password has been reset for {user.email}')\n            return Response({'message': 'Password has been reset successfully.'}, status=status.HTTP_200_OK)\n        logger.error('Password reset validation failed')\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n\n#3###
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/auth/users/views.py b/auth/users/views.py
--- a/auth/users/views.py	(revision d2dbc3bf8d8cb1e15016c9cb077cdb9b3914e932)
+++ b/auth/users/views.py	(date 1720437005733)
@@ -134,6 +134,20 @@
         return Response(serializer.data, status=status.HTTP_201_CREATED)
 
 
+class ReceiveReservationCodeAPIView(APIView):
+    def post(self, request):
+        reservation_code = request.data.get('reservation_code')
+
+        if not reservation_code:
+            logger.warning('Invalid data received')
+            return Response({'message': 'Invalid data'}, status=status.HTTP_400_BAD_REQUEST)
+
+        # Process the received reservation code and user email
+        logger.info(f'Received reservation code {reservation_code}')
+
+        # Add your processing logic here
+
+        return Response({'message': 'Reservation code received successfully'}, status=status.HTTP_200_OK)
 
 class ActivateSlotOuterAPIView(APIView):
     """
Index: auth/users/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\nfrom .views import RegisterAPIView, LoginAPIView, UserView, LogoutView, ReserveSlotAPIView, ActivateSlotOuterAPIView, ExitSlotInnerAPIView, ReservationHistoryAPIView, FreeSlotsAPIView, ActiveSlotsAPIView, PasswordResetRequestAPIView, PasswordResetAPIView\n\n\nurlpatterns = [\n    path('register/', RegisterAPIView.as_view(), name='register'),\n    path('login/', LoginAPIView.as_view(), name='login'),\n    path('user/', UserView.as_view(), name='user'),\n    path('logout/', LogoutView.as_view(), name='logout'),\n    path('reserve/', ReserveSlotAPIView.as_view(), name='reserve'),\n    path('activate/<str:code>/', ActivateSlotOuterAPIView.as_view(), name='activate'),\n    path('exit/<str:code>/', ExitSlotInnerAPIView.as_view(), name='exit'),\n    path('history/', ReservationHistoryAPIView.as_view(), name='history'),\n    path('freeslots/', FreeSlotsAPIView.as_view(), name='freeslots'),\n    path('active/', ActiveSlotsAPIView.as_view(), name='active'),\n    path('password-reset-request/', PasswordResetRequestAPIView.as_view(), name='password-reset-request'),\n    path('password-reset/', PasswordResetAPIView.as_view(), name='password-reset'),\n]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/auth/users/urls.py b/auth/users/urls.py
--- a/auth/users/urls.py	(revision d2dbc3bf8d8cb1e15016c9cb077cdb9b3914e932)
+++ b/auth/users/urls.py	(date 1720383355313)
@@ -1,5 +1,5 @@
 from django.urls import path
-from .views import RegisterAPIView, LoginAPIView, UserView, LogoutView, ReserveSlotAPIView, ActivateSlotOuterAPIView, ExitSlotInnerAPIView, ReservationHistoryAPIView, FreeSlotsAPIView, ActiveSlotsAPIView, PasswordResetRequestAPIView, PasswordResetAPIView
+from .views import RegisterAPIView, LoginAPIView, UserView, LogoutView, ReserveSlotAPIView, ActivateSlotOuterAPIView, ExitSlotInnerAPIView, ReservationHistoryAPIView, FreeSlotsAPIView, ActiveSlotsAPIView, PasswordResetRequestAPIView, PasswordResetAPIView, ReceiveReservationCodeAPIView
 
 
 urlpatterns = [
@@ -15,4 +15,5 @@
     path('active/', ActiveSlotsAPIView.as_view(), name='active'),
     path('password-reset-request/', PasswordResetRequestAPIView.as_view(), name='password-reset-request'),
     path('password-reset/', PasswordResetAPIView.as_view(), name='password-reset'),
+    path('receive-reservation-code/', ReceiveReservationCodeAPIView.as_view(), name='receive-reservation-code'),
 ]
\ No newline at end of file
